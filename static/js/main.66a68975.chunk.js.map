{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEatsFood","increaseLength","increaseSpeed","newSnake","unshift","onGameOver","snake","pop","forEach","alert","color","fontSize","Snake","Food","React","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAEe,WAACA,GACZ,OACI,6BACQA,EAAMC,UAAUC,KAAI,SAACC,EAAIC,GAC7B,IAAMC,EAAO,CACTC,KAAK,GAAD,OAAKH,EAAI,GAAT,KACJI,IAAI,GAAD,OAAKJ,EAAI,GAAT,MAEP,OACI,yBAAKK,UAAU,YAAYC,IAAKL,EAAGC,MAAOA,GAA1C,UCTA,WAACL,GACb,IAAMK,EAAO,CACTC,KAAK,GAAD,OAAKN,EAAMG,IAAI,GAAf,KACJI,IAAI,GAAD,OAAKP,EAAMG,IAAI,GAAf,MAEP,OACI,yBAAKK,UAAU,aAAaH,MAAOA,KCJrCK,EAAsB,WAK1B,MAAO,CAFiD,EAAhDC,KAAKC,OAAO,GAAAD,KAAKE,SAFjB,GAE6C,GACG,EAAhDF,KAAKC,OAAO,GAAAD,KAAKE,SAHjB,GAG6C,KAMjDC,EAAe,CACnBC,KAAML,IACJM,MAAO,IACPC,UAAW,QACXhB,UAAU,CACR,CAAC,EAAE,GACH,CAAC,EAAE,KAsJMiB,E,4MAlJbC,MAAOL,E,EAoBPM,UAAW,SAACC,GAEV,QADAA,EAAIA,GAAKC,OAAOC,OACNC,SACR,KAAK,GACH,EAAKC,SAAS,CAACR,UAAU,OACzB,MACF,KAAK,GACH,EAAKQ,SAAS,CAACR,UAAU,SACzB,MACF,KAAK,GACH,EAAKQ,SAAS,CAACR,UAAU,SACvB,MACJ,KAAK,GACH,EAAKQ,SAAS,CAACR,UAAU,Y,EAM/BS,UAAY,WACV,IAAIC,EAAI,YAAO,EAAKR,MAAMlB,WACtB2B,EAAOD,EAAKA,EAAKE,OAAS,GAE9B,OAAQ,EAAKV,MAAMF,WACjB,IAAK,QACHW,EAAO,CAACA,EAAK,GAAG,EAAGA,EAAK,IACxB,MACF,IAAK,OACFA,EAAO,CAACA,EAAK,GAAG,EAAGA,EAAK,IACzB,MACF,IAAK,OACDA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAG,GAC3B,MACF,IAAK,KACDA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAG,GAG/BD,EAAKG,KAAKF,GACVD,EAAKI,QACL,EAAKN,SAAS,CACZxB,UAAW0B,K,kEArDfK,YAAYC,KAAKP,UAAWO,KAAKd,MAAMH,OACvCkB,SAASC,UAAYF,KAAKb,Y,2CAOxBa,KAAKG,sBACLH,KAAKI,mBACLJ,KAAKK,oB,wCAiDP,IAAIV,EAAOK,KAAKd,MAAMlB,UAAUgC,KAAKd,MAAMlB,UAAU4B,OAAQ,GACzDd,EAAOkB,KAAKd,MAAMJ,KACnBa,EAAK,KAAOb,EAAK,IAAMa,EAAK,KAAKb,EAAK,KACvCkB,KAAKR,SAAS,CACZV,KAAML,MAERuB,KAAKM,iBACLN,KAAKO,mB,uCAKP,IAAIC,EAAQ,YAAOR,KAAKd,MAAMlB,WAC9BwC,EAASC,QAAQ,IACjBT,KAAKR,SAAS,CACZxB,UAAWwC,M,sCAMVR,KAAKd,MAAMH,MAAQ,IACpBiB,KAAKR,SAAS,CACZT,MAAOiB,KAAKd,MAAMH,MAAQ,O,4CAM9B,IAAIY,EAAOK,KAAKd,MAAMlB,UAAUgC,KAAKd,MAAMlB,UAAU4B,OAAQ,IAC1DD,EAAK,IAAK,KAAOA,EAAK,IAAK,KAAOA,EAAK,GAAK,GAAKA,EAAK,GAAI,IAC3DK,KAAKU,e,yCAMU,IAAD,OACZC,EAAK,YAAOX,KAAKd,MAAMlB,WACvB2B,EAAOgB,EAAMA,EAAMf,OAAQ,GAC/Be,EAAMC,MACND,EAAME,SAAQ,SAAA3C,GACTyB,EAAK,IAAKzB,EAAI,IAAMyB,EAAK,IAAMzB,EAAI,IACpC,EAAKwC,kB,mCAQTI,MAAM,8BAAD,OAA+Bd,KAAKd,MAAMlB,UAAU4B,SACzDI,KAAKR,SAASX,K,+BAOZ,OACE,6BACE,gDAAqB,0BAAMT,MAAO,CAAC2C,MAAM,MAAOC,SAAS,KAAMhB,KAAKd,MAAMlB,UAAU4B,OAA/D,MACrB,yBAAKrB,UAAU,aAEb,kBAAC0C,EAAD,CAAOjD,UAAWgC,KAAKd,MAAMlB,YAC7B,kBAACkD,EAAD,CAAMhD,IAAK8B,KAAKd,MAAMJ,a,GApIdqC,IAAMC,WCXJC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.66a68975.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default (props) => {\r\n    return(\r\n        <div>\r\n               {props.snakeDots.map((dot,i)=>{\r\n            const style ={\r\n                left: `${dot[0]}%`,\r\n                top: `${dot[1]}%`\r\n            }\r\n            return(\r\n                <div className=\"snake-dot\" key={i} style={style}> </div>\r\n            )\r\n            \r\n        })}\r\n\r\n        </div>\r\n    )   \r\n}\r\n\r\n","import React from \"react\"\r\n\r\nexport default  (props) => {\r\n    const style ={\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n    return(\r\n        <div className=\"snake-food\" style={style}></div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Snake from './Snake';\nimport Food from './Food'\n\nconst getRandomCoordinates =() =>{\n  let min=1;\n  let max = 98;\n  let x = Math.floor((Math.random()* (max-min +1)+min)/2)*2;\n  let y = Math.floor((Math.random()* (max-min +1)+min)/2)*2;\n  return [x,y]\n\n}\n\n\nconst initialState = {\n  food: getRandomCoordinates(),\n    speed: 200,\n    direction: 'RIGHT',\n    snakeDots:[\n      [0,0],\n      [2,0],\n    ]\n}\nclass App extends React.Component{\n  state= initialState;\n    \n  \n\n\n\ncomponentDidMount(){\n  setInterval(this.moveSnake, this.state.speed)\n  document.onkeydown = this.onKeyDown;\n} \n\n\n\n\n  componentDidUpdate(){\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEatsFood();\n  }\n\n  onKeyDown =(e)=>{\n    e = e || window.event;\n    switch (e.keyCode){\n      case 38:\n        this.setState({direction:'UP'});\n        break;\n      case 40:\n        this.setState({direction:'DOWN'});\n        break;\n      case 37:\n        this.setState({direction:'LEFT'});\n          break;\n      case 39:\n        this.setState({direction:'RIGHT'});\n          break;\n    }\n\n  }\n\n  moveSnake = () =>{\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction){\n      case 'RIGHT':\n        head = [head[0]+2, head[1]];\n        break;\n      case 'LEFT':\n         head = [head[0]-2, head[1]];\n        break; \n      case 'DOWN':\n          head = [head[0], head[1]+2];\n        break;\n      case 'UP':\n          head = [head[0], head[1]-2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots :dots\n    }) \n  }\n\n\ncheckIfEatsFood(){\n  let head = this.state.snakeDots[this.state.snakeDots.length -1];\n  let food = this.state.food;\n  if(head[0] === food[0] && head[1]===food[1]){\n    this.setState({\n      food: getRandomCoordinates()\n    })\n    this.increaseLength();\n    this.increaseSpeed();\n  }\n}\n\nincreaseLength(){\n  let newSnake = [...this.state.snakeDots];\n  newSnake.unshift([])\n  this.setState({\n    snakeDots: newSnake\n  })\n\n}\n\nincreaseSpeed(){\n  if(this.state.speed > 10){\n    this.setState({\n      speed: this.state.speed - 10\n    })\n  }\n}\n\ncheckIfOutOfBorders(){\n  let head = this.state.snakeDots[this.state.snakeDots.length -1];\n  if(head[0] >=100 || head[1] >=100 || head[0] < 0 || head[1] <0){\n    this.onGameOver();\n\n  }\n\n}\n\ncheckIfCollapsed(){\n  let snake = [...this.state.snakeDots];\n  let head = snake[snake.length -1];\n  snake.pop();\n  snake.forEach(dot => {\n    if(head[0] ==dot[0] && head[1] == dot[1]){\n      this.onGameOver();\n    }\n  })\n}\n\n\n\nonGameOver(){\n  alert(`Game Over. Snake length is ${this.state.snakeDots.length}`)\n  this.setState(initialState)\n}\n\n\n\n\n  render(){\n    return(\n      <div>\n        <h2>Current score is <span style={{color:'Red', fontSize:40}}>{this.state.snakeDots.length} </span></h2>\n        <div className=\"game-area\">\n          \n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food} ></Food>\n\n          \n    \n\n    </div>\n         </div>\n        \n\n    );\n  }\n}\n\n\n\nexport default App;\n\n\n{/* \n      <div className=\"snake-dot\" style={{top:0, left:0}}></div>\n      <div className=\"snake-dot\" style={{top:0, left:'2%'}}></div>\n      <div className=\"snake-dot\" style={{top:0, left:'4%'}}></div> */}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}